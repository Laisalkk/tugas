# -*- coding: utf-8 -*-
"""233083010055_Laisal kaffi_TUGAS EDA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SnJN9eOMSyCEVv9qkPDfr9kgNo00iyXV
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Membaca file CSV
file_path = '/content/drive/My Drive/Colab Notebooks/new_catur.csv'
df = pd.read_csv(file_path)

# Menampilkan data awal dan informasi kolom
display(df.head())
print(df.info())

# Mengisi missing values jika ada
df.fillna(method='ffill', inplace=True)

# Menampilkan deskripsi statistik dari data numerik
print(df.describe())

print(' ')

# Visualisasi distribusi `victory_status`
plt.figure(figsize=(8, 6))
sns.countplot(x='victory_status', data=df)
plt.title('Distribusi Victory Status')
plt.show()

print(' ')

# Membuat histogram untuk distribusi jumlah giliran (turns)
plt.figure(figsize=(10, 6))
sns.histplot(df['turns'], bins=30, kde=True)
plt.title('Distribusi Jumlah Giliran dalam Game')
plt.show()

# Mengisi nilai 'draw' untuk pertandingan yang tidak memiliki pemenang di kolom 'winner'
df['winner'].fillna('draw', inplace=True)

# Menghitung jumlah kemenangan putih, hitam, dan draw
winner_counts = df['winner'].value_counts()

# Membuat pie chart untuk presentase hasil pertandingan
plt.figure(figsize=(8, 8))
colors = ['#66b3ff', '#ff9999', '#99ff99']  # Warna untuk white, black, draw
plt.pie(winner_counts, labels=winner_counts.index, autopct='%1.1f%%', startangle=90, colors=colors)
plt.title('Persentase Kemenangan Hitam , Putih dan Draw')
plt.axis('equal')  # Agar pie chart berbentuk lingkaran
plt.show()

# Saat Hitam Menang: Kita melihat rating putih dalam pertandingan tersebut, yang kalah.
# Saat Putih Menang: Kita melihat rating hitam dalam pertandingan tersebut, yang kalah.


# Filter data untuk white_rating saat hitam menang atau draw
df_white_filtered = df[df['winner'].isin(['black', 'draw'])]

# Membuat box plot untuk white_rating ketika hitam menang atau draw
plt.figure(figsize=(10, 6))
sns.boxplot(x='winner', y='white_rating', data=df_white_filtered)
plt.title('Distribusi Rating Pemain Putih saat Hitam Menang atau Draw')
plt.xlabel('Pemenang')
plt.ylabel('White Rating')
plt.show()

# Filter data untuk black_rating saat putih menang atau draw
df_black_filtered = df[df['winner'].isin(['white', 'draw'])]

# Membuat box plot untuk black_rating ketika putih menang atau draw
plt.figure(figsize=(10, 6))
sns.boxplot(x='winner', y='black_rating', data=df_black_filtered)
plt.title('Distribusi Rating Pemain Hitam saat Putih Menang atau Draw')
plt.xlabel('Pemenang')
plt.ylabel('Black Rating')
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='white_rating', y='black_rating', hue='winner', data=df, palette={'white':'blue', 'black':'green', 'draw':'orange'})
plt.title('Perbandingan Rating Pemain Putih dan Hitam Berdasarkan Pemenang')
plt.xlabel('White Rating')
plt.ylabel('Black Rating')
plt.show()

# Menghitung rata-rata rating berdasarkan pemenang
avg_ratings = df.groupby('winner')[['white_rating', 'black_rating']].mean()

# Membuat bar plot
avg_ratings.plot(kind='bar', figsize=(10, 6))
plt.title('Rata-rata Rating Pemain Berdasarkan Pemenang')
plt.ylabel('Rata-rata Rating')
plt.xlabel('Pemenang')
plt.xticks(rotation=0)
plt.show()

# Visualisasi pembukaan yang paling sering digunakan
top_openings = df['opening_name'].value_counts().nlargest(10)
plt.figure(figsize=(12, 6))
sns.barplot(x=top_openings, y=top_openings.index)
plt.title('Top 10 Pembukaan Catur yang Paling Sering Digunakan')
plt.show()